# This setup creates daily backups to a remote server.
# Backups are encrypted with each client machine having a unique key
# Backups are incremental, so daily backups finish fast if changes are small
# We do not have to trust the remote machine. ie. repo key does not go on server
# TBD - convert into ansible client and server roles



# Manual setup for now:

# Server INITIAL: Create Borg User
sudo adduser --disabled-password borgbak

# Server INITIAL: Create backup repository
sudo mkdir /backups
sudo chown -R borgbak /backups

# Server FOR EACH NEW CLIENT: Create ssh key for each client
sudo -u borgbak -i
mkdir ~/.ssh
mkdir ~/keys
chmod 0700 ~/keys ~/.ssh
cd ~/keys
MYHOSTNAME="client.example.com"
ssh-keygen -b 4096 -C "${MYHOSTNAME} Backup" -f "${MYHOSTNAME}_backup" -N ''

# Server FOR EACH NEW CLIENT: Place private key in ~borgbak/authorized_keys
# ~borgbak/.ssh/authorized_keys
command="borg serve --restrict-to-path /backups/${MYHOSTNAME}",restrict ssh-rsa AAAAB3....


# CLIENT SETUP
# Distribute ssh private key to client
ssh client
sudo -i
mkdir /root/backup
Create ${MYHOSTNAME}_backup
Create borgbackup.sh from https://raw.githubusercontent.com/amit/kachara/master/borgbackup/borgbackup.sh


# Client - Generate Repo Key
# Possibly with "openssl rand -base64 48" Note it down on different trusted host

# Client Init Repo with SSH
MYSERVERNAME="server.example.com"
SSHPORT=20022
export BORG_PASSPHRASE='XXXXXXXXXXXXXXXXXX'  # Copy from borgbackup.sh file
eval `ssh-agent`
ssh-add  "${MYHOSTNAME}_backup"
export BORG_REPO="ssh://borgbak@${MYSERVERNAME}:${SSHPORT}/backups/${MYHOSTNAME}"
borg init --encryption=repokey $BORG_REPO
borg upgrade --tam  $BORG_REPO


# Create and tweak backup script, changing the repo key and backup directories

# Client - Create cronjob - sliding time so two backups don't happen parallely on server.
# Add a line similar to this to /etc/crontab
# 30 3 * * * root /root/backup/borgbackup.sh
